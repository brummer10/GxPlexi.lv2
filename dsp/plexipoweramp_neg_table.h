
// plexipoweramp_neg_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  -3.000000
 // --table_div  1.535615
 // --table_op  1.000000

struct tableplexipoweramp_neg { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tableplexipoweramp_neg_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tableplexipoweramp_neg&() const { return *(tableplexipoweramp_neg*)this; }
};

 static tableplexipoweramp_neg_imp<200> plexipoweramp_neg_table __rt_data = {
	0,-0.826596,66.3333,200, {
	0.000000000000,-0.016479329273,-0.032927554021,-0.049326483901,-0.065659380587,
	-0.081910864739,-0.098066828466,-0.114114353267,-0.130041632837,-0.145837900706,
	-0.161493362189,-0.176999130664,-0.192347167453,-0.207530225762,-0.222541797700,
	-0.237376064770,-0.252027851324,-0.266492580875,-0.280766235146,-0.294845315585,
	-0.308726807309,-0.322408145254,-0.335887182420,-0.349162160176,-0.362231680282,
	-0.375094678744,-0.387750401314,-0.400198380489,-0.412438413994,-0.424470544592,
	-0.436295041214,-0.447912381304,-0.459323234170,-0.470528445595,-0.481529023245,
	-0.492326123167,-0.502921037098,-0.513315180602,-0.523510082001,-0.533507371996,
	-0.543308774052,-0.552916095311,-0.562331218253,-0.571556092756,-0.580592728836,
	-0.589443189797,-0.598109585896,-0.606594068374,-0.614898824015,-0.623026070002,
	-0.630978049118,-0.638757025402,-0.646365279986,-0.653805107326,-0.661078811659,
	-0.668188703763,-0.675137097913,-0.681926309116,-0.688558650536,-0.695036431101,
	-0.701361953353,-0.707537511409,-0.713565389151,-0.719447858495,-0.725187177893,
	-0.730785590888,-0.736245324845,-0.741568589785,-0.746757577319,-0.751814459696,
	-0.756741388946,-0.761540496100,-0.766213890522,-0.770763659271,-0.775191866576,
	-0.779500553369,-0.783691736862,-0.787767410207,-0.791729542183,-0.795580076967,
	-0.799320933909,-0.802954007393,-0.806481166706,-0.809904255954,-0.813225094025,
	-0.816445474558,-0.819567165959,-0.822591911443,-0.825521429098,-0.828357411963,
	-0.831101528139,-0.833755420911,-0.836320708901,-0.838798986210,-0.841191822610,
	-0.843500763712,-0.845727331175,-0.847873022917,-0.849939313320,-0.851927653475,
	-0.853839471404,-0.855676172303,-0.857439138798,-0.859129731193,-0.860749287724,
	-0.862299124827,-0.863780537403,-0.865194799082,-0.866543162497,-0.867826859553,
	-0.869047101703,-0.870205080225,-0.871301966488,-0.872338912240,-0.873317049872,
	-0.874237492693,-0.875101335222,-0.875909653435,-0.876663505056,-0.877363929819,
	-0.878011949741,-0.878608569388,-0.879154776141,-0.879651540457,-0.880099816136,
	-0.880500540575,-0.880854635025,-0.881163004849,-0.881426539767,-0.881646114115,
	-0.881822587078,-0.881956802946,-0.882049591346,-0.882101767483,-0.882114132375,
	-0.882087473087,-0.882022562950,-0.881920161803,-0.881781016197,-0.881605859638,
	-0.881395412775,-0.881150383642,-0.880871467850,-0.880559348803,-0.880214697901,
	-0.879838174738,-0.879430427310,-0.878992092202,-0.878523794785,-0.878026149401,
	-0.877499759562,-0.876945218122,-0.876363107455,-0.875753999654,-0.875118456687,
	-0.874457030572,-0.873770263562,-0.873058688293,-0.872322827963,-0.871563196483,
	-0.870780298647,-0.869974630283,-0.869146678405,-0.868296921372,-0.867425829027,
	-0.866533862856,-0.865621476123,-0.864689114015,-0.863737213779,-0.862766204866,
	-0.861776509062,-0.860768540613,-0.859742706368,-0.858699405902,-0.857639031640,
	-0.856561968984,-0.855468596434,-0.854359285702,-0.853234401841,-0.852094303353,
	-0.850939342303,-0.849769864434,-0.848586209272,-0.847388710240,-0.846177694760,
	-0.844953484360,-0.843716394769,-0.842466736032,-0.841204812594,-0.839930923409,
	-0.838645362027,-0.837348416694,-0.836040370441,-0.834721501176,-0.833392081775,
	-0.832052380165,-0.830702659414,-0.829343177815,-0.827974188969,-0.826595941867
	}
};

double always_inline plexipoweramp_negclip(double x) {
    double f = fabs(x);
    f = f * plexipoweramp_neg_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = plexipoweramp_neg_table.data[0];
    } else if (i >= plexipoweramp_neg_table.size-1) {
        f = plexipoweramp_neg_table.data[plexipoweramp_neg_table.size-1];
    } else {
    f -= i;
    f = plexipoweramp_neg_table.data[i]*(1-f) + plexipoweramp_neg_table.data[i+1]*f;
    }
    return copysign(f, x);
}

