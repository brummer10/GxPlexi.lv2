
// plexipoweramp_pre_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  3.000000
 // --table_div  52.135743
 // --table_op  1.000000

struct tableplexipoweramp_pre { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tableplexipoweramp_pre_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tableplexipoweramp_pre&() const { return *(tableplexipoweramp_pre*)this; }
};

 static tableplexipoweramp_pre_imp<200> plexipoweramp_pre_table __rt_data = {
	0,-0.833333,66.3333,200, {
	0.000000000000,-0.001933315612,-0.006741505361,-0.012951617608,-0.019850221897,
	-0.027091006264,-0.034505605525,-0.042012022188,-0.049570203304,-0.057160471564,
	-0.064773048522,-0.072402964809,-0.080047587287,-0.087705417636,-0.095375508639,
	-0.103057180581,-0.110749883443,-0.118453129911,-0.126166462796,-0.133889439149,
	-0.141621622502,-0.149362579035,-0.157111875652,-0.164869078986,-0.172633754842,
	-0.180405467846,-0.188183781198,-0.195968256459,-0.203758453351,-0.211553929553,
	-0.219354240487,-0.227158939088,-0.234967575557,-0.242779697087,-0.250594847566,
	-0.258412567260,-0.266232392454,-0.274053855069,-0.281797842464,-0.288887849827,
	-0.295639609777,-0.302172952216,-0.308538740577,-0.314766759933,-0.320876944926,
	-0.326883706955,-0.332798008903,-0.338628499280,-0.344382189994,-0.350064888639,
	-0.355681488340,-0.361236169931,-0.366732547619,-0.372173776781,-0.377562635559,
	-0.382901587843,-0.388192832695,-0.393438343717,-0.398639900804,-0.403799116070,
	-0.408917455202,-0.413996255247,-0.419036739519,-0.424040030207,-0.429007159099,
	-0.433939076769,-0.438836660485,-0.443700721059,-0.448532008800,-0.453331218715,
	-0.458098995078,-0.462835935440,-0.467542594187,-0.472219485679,-0.476867087053,
	-0.481485840708,-0.486076156541,-0.490638413934,-0.495172963552,-0.499680128949,
	-0.504160208025,-0.508613474334,-0.513040178270,-0.517440548146,-0.521814791165,
	-0.526163094313,-0.530485625162,-0.534782532611,-0.539053947560,-0.543299983531,
	-0.547520737229,-0.551716289076,-0.555886703686,-0.560032030317,-0.564152303291,
	-0.568247542381,-0.572317753180,-0.576362927448,-0.580383043445,-0.584378066244,
	-0.588347948040,-0.592292628446,-0.596212034786,-0.600106082383,-0.603974674847,
	-0.607817704365,-0.611635051994,-0.615426587961,-0.619192171968,-0.622931653511,
	-0.626644872210,-0.630331658147,-0.633991832230,-0.637625206564,-0.641231584846,
	-0.644810762782,-0.648362528521,-0.651886663111,-0.655382940988,-0.658851130478,
	-0.662290994332,-0.665702290287,-0.669084771648,-0.672438187905,-0.675762285369,
	-0.679056807838,-0.682321497289,-0.685556094593,-0.688760340257,-0.691933975180,
	-0.695076741443,-0.698188383105,-0.701268647022,-0.704317283676,-0.707334048019,
	-0.710318700320,-0.713271007017,-0.716190741572,-0.719077685320,-0.721931628312,
	-0.724752370145,-0.727539720774,-0.730293501310,-0.733013544786,-0.735699696897,
	-0.738351816709,-0.740969777323,-0.743553466507,-0.746102787269,-0.748617658399,
	-0.751098014941,-0.753543808619,-0.755955008203,-0.758331599818,-0.760673587184,
	-0.762980991801,-0.765253853065,-0.767492228323,-0.769696192864,-0.771865839845,
	-0.774001280157,-0.776102642231,-0.778170071783,-0.780203731507,-0.782203800711,
	-0.784170474910,-0.786103965359,-0.788004498559,-0.789872315711,-0.791707672145,
	-0.793510836706,-0.795282091125,-0.797021729358,-0.798730056913,-0.800407390154,
	-0.802054055603,-0.803670389229,-0.805256735733,-0.806813447841,-0.808340885588,
	-0.809839415621,-0.811309410501,-0.812751248023,-0.814165310550,-0.815551984360,
	-0.816911659012,-0.818244726739,-0.819551581848,-0.820832620158,-0.822088238452,
	-0.823318833955,-0.824524803837,-0.825706544744,-0.826864452351,-0.827998920938,
	-0.829110343001,-0.830199108876,-0.831265606394,-0.832310220565,-0.833333333274
	}
};

double always_inline plexipoweramp_preclip(double x) {
    double f = fabs(x);
    f = f * plexipoweramp_pre_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = plexipoweramp_pre_table.data[0];
    } else if (i >= plexipoweramp_pre_table.size-1) {
        f = plexipoweramp_pre_table.data[plexipoweramp_pre_table.size-1];
    } else {
    f -= i;
    f = plexipoweramp_pre_table.data[i]*(1-f) + plexipoweramp_pre_table.data[i+1]*f;
    }
    return copysign(f, x);
}

