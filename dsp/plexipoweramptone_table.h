
// plexipoweramptone_table generated by DK/circ_table_gen.py -- do not modify manually

 // variables used
 // --sig_max  3.000000
 // --table_div  29.005422
 // --table_op  0.800000

struct tableplexipoweramptone { // 1-dimensional function table
    float low;
    float high;
    float istep;
    int size;
    float data[];
};

template <int tab_size>
struct tableplexipoweramptone_imp {
    float low;
    float high;
    float istep;
    int size;
    float data[tab_size];
    operator tableplexipoweramptone&() const { return *(tableplexipoweramptone*)this; }
};

 static tableplexipoweramptone_imp<200> plexipoweramptone_table __rt_data = {
	0,-0.833333,53.0667,200, {
	0.000000000000,-0.002520805868,-0.008664968438,-0.016340712811,-0.024553658666,
	-0.032835405839,-0.040980430026,-0.048906158587,-0.056588213727,-0.064029101215,
	-0.071243121023,-0.078249145476,-0.085067209603,-0.091716944916,-0.098216900979,
	-0.104584291259,-0.110834938652,-0.116983312175,-0.123042602584,-0.129024812004,
	-0.134940845893,-0.140800602033,-0.146613054320,-0.152386330589,-0.158127784384,
	-0.163844060902,-0.169541157461,-0.175224478871,-0.180898888116,-0.186568752706,
	-0.192237987060,-0.197910091237,-0.203588186312,-0.209275046673,-0.214973129481,
	-0.220684601516,-0.226411363618,-0.232155072904,-0.237917162913,-0.243698861841,
	-0.249501208980,-0.255325069467,-0.261171147441,-0.267039997671,-0.272932035697,
	-0.278847546513,-0.284786691781,-0.290749515534,-0.296735948281,-0.302745764318,
	-0.308778230210,-0.314832505441,-0.320908077796,-0.327004402662,-0.333120792813,
	-0.339256386215,-0.345410122307,-0.351580710337,-0.357766582094,-0.363965821537,
	-0.370176060254,-0.376394320577,-0.382616775002,-0.388838365741,-0.395052178890,
	-0.401248363265,-0.407412146588,-0.413519914053,-0.419530712805,-0.425365742234,
	-0.430853844098,-0.435607408779,-0.439170571777,-0.442041064213,-0.444881617150,
	-0.447830788716,-0.450893651182,-0.454060727030,-0.457321871519,-0.460667603569,
	-0.464089179840,-0.467578549449,-0.471128301057,-0.474731612991,-0.478382207148,
	-0.482074306496,-0.485802595884,-0.489562185923,-0.493348579678,-0.497157641969,
	-0.500985571068,-0.504828872602,-0.508684335499,-0.512549009815,-0.516420186284,
	-0.520295377474,-0.524172300411,-0.528048860563,-0.531923137068,-0.535793369125,
	-0.539657943441,-0.543515382666,-0.547364334721,-0.551203562969,-0.555031937149,
	-0.558848425021,-0.562652084661,-0.566442057361,-0.570217561078,-0.573977884406,
	-0.577722381004,-0.581450464471,-0.585161603621,-0.588855318117,-0.592531174457,
	-0.596188782272,-0.599827790907,-0.603447886275,-0.607048787955,-0.610630246521,
	-0.614192041068,-0.617733976949,-0.621255883672,-0.624757612971,-0.628239037029,
	-0.631700046832,-0.635140550660,-0.638560472690,-0.641959751711,-0.645338339945,
	-0.648696201945,-0.652033313598,-0.655349661191,-0.658645240562,-0.661920056304,
	-0.665174121046,-0.668407454783,-0.671620084253,-0.674812042377,-0.677983367727,
	-0.681134104052,-0.684264299824,-0.687374007834,-0.690463284816,-0.693532191090,
	-0.696580790254,-0.699609148876,-0.702617336232,-0.705605424050,-0.708573486279,
	-0.711521598880,-0.714449839625,-0.717358287923,-0.720247024648,-0.723116131988,
	-0.725965693306,-0.728795793010,-0.731606516430,-0.734397949713,-0.737170179719,
	-0.739923293929,-0.742657380361,-0.745372527487,-0.748068824167,-0.750746359576,
	-0.753405223146,-0.756045504512,-0.758667293457,-0.761270679864,-0.763855753676,
	-0.766422604854,-0.768971323341,-0.771501999027,-0.774014721720,-0.776509581116,
	-0.778986666775,-0.781446068096,-0.783887874295,-0.786312174388,-0.788719057170,
	-0.791108611199,-0.793480924781,-0.795836085958,-0.798174182493,-0.800495301861,
	-0.802799531238,-0.805086957489,-0.807357667164,-0.809611746487,-0.811849281353,
	-0.814070357317,-0.816275059590,-0.818463473038,-0.820635682172,-0.822791771147,
	-0.824931823759,-0.827055923440,-0.829164153259,-0.831256595914,-0.833333333735
	}
};

double always_inline plexipoweramptoneclip(double x) {
    double f = fabs(x);
    f = f * plexipoweramptone_table.istep;
    int i = static_cast<int>(f);
    if (i < 0) {
        f = plexipoweramptone_table.data[0];
    } else if (i >= plexipoweramptone_table.size-1) {
        f = plexipoweramptone_table.data[plexipoweramptone_table.size-1];
    } else {
    f -= i;
    f = plexipoweramptone_table.data[i]*(1-f) + plexipoweramptone_table.data[i+1]*f;
    }
    return copysign(f, x);
}

